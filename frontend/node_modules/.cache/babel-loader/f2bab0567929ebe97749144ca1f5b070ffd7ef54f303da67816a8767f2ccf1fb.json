{"ast":null,"code":"function getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\nconst min = Math.min;\nconst max = Math.max;\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        let resetPlacement = 'bottom';\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n              if (placement) {\n                resetPlacement = placement;\n              }\n              break;\n            }\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = middlewareArguments;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      await apply({\n        ...middlewareArguments,\n        ...dimensions\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (rects.floating.width !== nextDimensions.width || rects.floating.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        }\n\n        // There are 2 or more connected rects\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["getSide","placement","split","getAlignment","getMainAxisFromPlacement","includes","getLengthFromAxis","axis","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","console","error","join","name","Error","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","fn","nextX","nextY","data","reset","initialPlacement","elements","warn","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","middlewareArguments","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","value","max$1","arrow","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","shouldAddOffset","alignmentOffset","centerOffset","hash$1","getOppositePlacement","replace","matched","getAlignmentSides","alignment","mainAlignmentSide","main","cross","hash","start","end","getOppositeAlignmentPlacement","sides","allPlacements","reduce","acc","concat","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_middlewareData$autoP3","_middlewareData$autoP4","_placementsSortedByLe","detectOverflowOptions","placements","undefined","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByLeastOverflow","slice","sort","a","b","placementThatFitsOnAllSides","find","every","resetPlacement","getExpandedPlacements","oppositePlacement","flip","_middlewareData$flip","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","flipAlignment","isBasePlacement","overflowsData","push","_middlewareData$flip$","_middlewareData$flip2","nextIndex","_overflowsData$map$so","map","d","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","_middlewareData$offse3","_middlewareData$offse4","isOriginSide","size","apply","heightSide","widthSide","xMin","xMax","yMin","yMax","dimensions","availableHeight","availableWidth","nextDimensions","inline","_await$platform$getCl","fallback","clientRects","getClientRects","getBoundingClientRect","_clientRects$find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects"],"sources":["/home/ravi/npciV4/IGC-NPCI-HACKATHON/frontend/node_modules/@floating-ui/core/dist/floating-ui.core.browser.mjs"],"sourcesContent":["function getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        let resetPlacement = 'bottom';\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n              if (placement) {\n                resetPlacement = placement;\n              }\n              break;\n            }\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = middlewareArguments;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      await apply({\n        ...middlewareArguments,\n        ...dimensions\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (rects.floating.width !== nextDimensions.width || rects.floating.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        }\n\n        // There are 2 or more connected rects\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}