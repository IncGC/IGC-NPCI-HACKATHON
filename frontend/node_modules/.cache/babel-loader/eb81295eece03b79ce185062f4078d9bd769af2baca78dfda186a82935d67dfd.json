{"ast":null,"code":"/*!\n* tabbable 6.0.1\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])', 'details>summary:first-of-type', 'details'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  return element.getRootNode();\n} : function (element) {\n  return element.ownerDocument;\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      var shadowRoot = element.shadowRoot ||\n      // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n      var validShadowRoot = !options.shadowRootFilter || options.shadowRootFilter(element);\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n  return candidates;\n};\nvar getTabindex = function getTabindex(node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n  var radioScope = node.form || getRootNode(node);\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n  var radioSet;\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRootHost;\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  var nodeRootHost = getRootNode(node).host;\n  var attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && _nodeRootHost.ownerDocument.contains(nodeRootHost) || node.ownerDocument.contains(node));\n  while (!attached && nodeRootHost) {\n    var _nodeRootHost2;\n    // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n    //  which means we need to get the host's host and check if that parent host is contained\n    //  in (i.e. attached to) the document\n    nodeRootHost = getRootNode(nodeRootHost).host;\n    attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && _nodeRootHost2.ownerDocument.contains(nodeRootHost));\n  }\n  return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n    width = _node$getBoundingClie.width,\n    height = _node$getBoundingClie.height;\n  return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n    getShadowRoot = _ref.getShadowRoot;\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled || isHiddenInput(node) || isHidden(node, options) ||\n  // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n  return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n  return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getTabindex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(el, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n  return sortByOrder(candidates);\n};\nvar focusable = function focusable(el, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n  return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\nexport { focusable, isFocusable, isTabbable, tabbable };","map":{"version":3,"mappings":"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","names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","ownerDocument","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","call","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","content","children","nestedCandidates","flatten","push","scopeParent","validCandidate","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","getTabindex","node","isScope","tabIndex","test","isContentEditable","isNaN","parseInt","getAttribute","sortOrderedTabbables","a","b","documentOrder","isInput","isHiddenInput","type","isDetailsWithSummary","r","some","child","getCheckedRadio","nodes","form","i","checked","isTabbableRadio","name","radioScope","queryRadios","radioSet","window","CSS","escape","err","console","error","message","isRadio","isNonTabbableRadio","isNodeAttached","nodeRootHost","host","attached","_nodeRootHost","contains","_nodeRootHost2","isZeroArea","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","parentNode","disabled","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","sort","reduce","acc","sortable","concat","tabbable","bind","focusable","isTabbable","Error","focusableCandidateSelector","isFocusable"],"sources":["/home/ravi/npciV4/IGC-NPCI-HACKATHON/frontend/node_modules/tabbable/src/index.js"],"sourcesContent":["const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]:not(slot)',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n  'details>summary:first-of-type',\n  'details',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element.getRootNode()\n    : (element) => element.ownerDocument;\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      const validShadowRoot =\n        !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\nconst getTabindex = function (node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if (\n      (isScope ||\n        /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        node.isContentEditable) &&\n      isNaN(parseInt(node.getAttribute('tabindex'), 10))\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  let nodeRootHost = getRootNode(node).host;\n  let attached = !!(\n    nodeRootHost?.ownerDocument.contains(nodeRootHost) ||\n    node.ownerDocument.contains(node)\n  );\n\n  while (!attached && nodeRootHost) {\n    // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n    //  which means we need to get the host's host and check if that parent host is contained\n    //  in (i.e. attached to) the document\n    nodeRootHost = getRootNode(nodeRootHost).host;\n    attached = !!nodeRootHost?.ownerDocument.contains(nodeRootHost);\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabindex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getTabindex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}